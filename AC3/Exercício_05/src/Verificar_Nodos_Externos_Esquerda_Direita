public String binaryPreorder(LinkedBinaryTree<E> T, Position<E> v) {
		String s = "";
		s += v.element();
		int esq = 0;
		int dir = 0;
		int contesq = 0;
		int contdir = 0;
		for (Position<E> i: T.children(v)) {
		
			//Verifica se T é de esquerda ou de direita
			if(T == a1){
				esq = 1;
				dir = 0;
			}if(T == a3){
				esq = 0;
				dir = 1;
			//fim da verificação	
				
			//verifica se é externo
			if (T.Left(v) == "" and T.Right(v) == "") {
				
				}if (esq == 1){
					contesq +=1;
				}else if(dir == 1){
					contdir +=1;
				}
			}
			//fim da verificação
			
			//BenaryPreorder original
			if (T.hasLeft(v)) {
				s += T.binaryPostorder(T, i);
			} else if(T.hasRight(v)) {	
			
				s += T.binaryPreorder(T, i);
			}
			//Fim do benaryPreorder
			
		}
		System.out.println(contdir, contesq);
		return s;
	}
